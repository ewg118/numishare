<?xml version="1.0" encoding="utf-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:foaf="http://xmlns.com/foaf/0.1/" xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
	xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:fr="http://orbeon.org/oxf/xml/form-runner" xmlns:exist="http://exist.sourceforge.net/NS/exist"
	xmlns:xxi="http://orbeon.org/oxf/xml/xinclude" xmlns:numishare="https://github.comu/ewg118/numishare" xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:nuds="http://nomisma.org/nuds">
	<head>
		<title>Numishare: Administrative Interface</title>
		<!-- Core + Skin CSS -->
		<link rel="stylesheet" href="/fr/style/bootstrap/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="/fr/style/form-runner-bootstrap-override.css" type="text/css" />
		<link rel="shortcut icon" href="/ops/images/orbeon-icon-16.ico" />
		<link rel="icon" href="/ops/images/orbeon-icon-16.png" type="image/png" />
		<link rel="stylesheet" href="https://netdna.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" />
		<script type="text/javascript" src="https://netdna.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/apps/numishare/xforms/css/xforms.css" />

		<xforms:model xmlns="http://nomisma.org/nuds">
			<!-- exist URL is stored in an XML file -->
			<xforms:instance id="exist-config" xxf:exclude-result-prefixes="#all">
				<xi:include href="../exist-config.xml"/>
			</xforms:instance>

			<xforms:instance id="control-instance" xxf:exclude-result-prefixes="#all">
				<controls xmlns="">
					<id/>
					<identifiers/>
					<publicationStatus/>
					<collection-name/>
					<status/>
					<error/>
					<numFound/>
					<page>1</page>
					<query_input/>
					<query_sent/>
					<interface/>
					<create-collection-trigger>false</create-collection-trigger>
					<save-trigger>false</save-trigger>
					<username/>
				</controls>
			</xforms:instance>

			<xforms:instance id="config" xxf:exclude-result-prefixes="#all">
				<config xmlns=""/>
			</xforms:instance>

			<xforms:instance id="collections-list" xxf:exclude-result-prefixes="#all">
				<collections xmlns=""/>
			</xforms:instance>

			<xforms:instance id="config-template" xxf:exclude-result-prefixes="#all">
				<config xmlns="" version="25.04" release="1.0">
					<title>Numishare</title>
					<description>A short description of the collection.</description>
					<logo/>
					<favicon>favicon.png</favicon>
					<url>http://localhost:8080/orbeon/numishare/</url>
					<server-port>8080</server-port>
					<sparql_endpoint>http://nomisma.org/query</sparql_endpoint>
					<annotation_sparql_endpoint/>
					<type_series/>
					<die_series/>
					<specimens_per_page>48</specimens_per_page>
					<solr_published>http://localhost:8983/solr/numishare/</solr_published>
					<geonames_api_key/>
					<mapboxKey/>
					<googleKey/>
					<contact/>
					<google_analytics/>
					<collection_type>object</collection_type>
					<features_enabled>true</features_enabled>
					<pelagios_enabled>false</pelagios_enabled>
					<ctype_enabled>false</ctype_enabled>
					<index_subtype_metadata>false</index_subtype_metadata>
					<index_subtypes_as_references>false</index_subtypes_as_references>
					<union_type_catalog enabled="false">
						<series typeSeries="" uriSpace="" collectionName=""/>
					</union_type_catalog>
					<die_study enabled="false">
						<namedGraph/>
					</die_study>
					<uri_space/>
					<baselayers>
						<layer enabled="true">mb_physical</layer>
						<layer enabled="true">osm</layer>
						<layer enabled="true">imperium</layer>
					</baselayers>
					<template>
						<agencyName/>
						<copyrightHolder/>
						<collection/>
						<language>en</language>
						<rights>http://rightsstatements.org/vocab/NoC-US/1.0/</rights>
						<license for="data">http://opendatacommons.org/licenses/odbl/</license>
						<license for="images">https://creativecommons.org/choose/mark/</license>
						<owner/>
						<repository/>
					</template>
					<includes/>
					<installation_path>/usr/local/projects/numishare</installation_path>
					<images>
						<absolute_path>oxf:/numishare-images</absolute_path>
						<iiif_server/>
						<thumbnail>120</thumbnail>
						<reference>400</reference>
					</images>
					<languages>
						<language code="ar" enabled="false" rtl="true"/>
						<language code="bg" enabled="false"/>
						<language code="da" enabled="false"/>
						<language code="de" enabled="false"/>
						<language code="el" enabled="false"/>
						<language code="en" enabled="false"/>
						<language code="es" enabled="false"/>
						<language code="fr" enabled="false"/>
						<language code="he" enabled="false" rtl="true"/>
						<language code="hu" enabled="false"/>
						<language code="it" enabled="false"/>
						<language code="nl" enabled="false"/>
						<language code="pl" enabled="false"/>
						<language code="ro" enabled="false"/>
						<language code="ru" enabled="false"/>
						<language code="sv" enabled="false"/>
						<language code="tr" enabled="false"/>
						<language code="uk" enabled="false"/>
						<language code="ur" enabled="false" rtl="true"/>
					</languages>
					<positions/>
					<localTypes/>
					<facets>
						<facet type="text" role="entity">artist_facet</facet>
						<facet type="text" role="entity">authority_facet</facet>
						<facet type="list" role="typology">coinType_facet</facet>
						<facet type="list" role="provenance">collection_facet</facet>
						<facet type="text" role="entity">deity_facet</facet>
						<facet type="list" role="typology">denomination_facet</facet>
						<facet type="list" role="department">department_facet</facet>
						<facet type="text" role="entity">engraver_facet</facet>
						<facet type="list" role="provenance">findspot_facet</facet>
						<facet type="text" role="entity">issuer_facet</facet>
						<facet type="text" role="entity">maker_facet</facet>
						<facet type="list" role="typology">manufacture_facet</facet>
						<facet type="list" role="typology">material_facet</facet>
						<facet type="list" role="place">mint_facet</facet>
						<facet type="list" role="typology">objectType_facet</facet>
						<facet type="text" role="entity">portrait_facet</facet>
						<facet type="text" role="reference">reference_facet</facet>
						<facet type="list" role="place">region_facet</facet>
						<facet type="list" role="typology">script_facet</facet>
						<facet type="text" role="entity">state_facet</facet>
						<facet type="text" role="subject">subject_facet</facet>
					</facets>
					<hoard_options>
						<display_stub>authority,mint,date</display_stub>
					</hoard_options>
					<theme>
						<orbeon_theme>default</orbeon_theme>
						<themes_url>http://localhost:8080/orbeon/themes/</themes_url>
						<layouts>
							<results>
								<image_location>right</image_location>
							</results>
							<display>
								<nuds>
									<orientation>vertical</orientation>
									<image_location>left</image_location>
								</nuds>
							</display>
						</layouts>
					</theme>
					<footer>
						<div class="row">
							<div class="col-md-12">
								<p>Powered by <a href="https://github.com/ewg118/numishare" target="_blank">Numishare</a></p>
							</div>
						</div>
					</footer>
					<pages>
						<index>
							<p>
								<a href="https://github.com/ewg118/numishare/">Numishare</a> is a free, open source, modularized system of Tomcat applications
								for the web delivery of cultural heritage artifacts, with particular focus on coins and medals. Metadata are edited with XForms
								and delivered with <a href="http://www.orbeon.com">Orbeon</a>, <a href="http://exist-db.org/exist/apps/homepage/index.html"
									>eXist-db</a>, and <a href="http://lucene.apache.org/solr/">Apache Solr</a>.</p>
						</index>
						<compare enabled="true"/>
						<analyze enabled="false"/>
						<visualize enabled="true"/>
						<apis enabled="true"/>
						<feedback enabled="false">
							<smtp-host>localhost</smtp-host>
							<to type="">
								<email></email>
								<name></name>
							</to>
							<recipient-types>
								<type>curatorial</type>
								<type>technical</type>
							</recipient-types>
							<feedback-types>
								<type type="curatorial">Cataloging error</type>
								<type type="curatorial|technical">Comment or suggestion</type>
								<type type="technical">Interface bug</type>					
								<type type="curatorial">Other</type>
							</feedback-types>
							<iframe-url>feedback-form</iframe-url>
						</feedback>
						<symbols enabled="false"/>
						<identify enabled="false"/>
					</pages>
					<navigation>
						<tab href="results" id="browse"/>
						<tab href="search" id="search"/>
						<tab href="maps" id="maps"/>
						<tab href="symbols" id="symbols"/>
						<tab href="identify" id="identify" label="Identify a Coin"/>
						<tab href="contributors" id="contributors"/>
						<tab href="analyze" id="analyze"/>
						<tab href="visualize" id="visualize"/>
						<tab href="feedback" id="feedback"/>
						<tab href="apis" id="apis" label="APIs"/>
						<tab id="pages"/>
						<tab id="languages-tab"/>
					</navigation>
				</config>
			</xforms:instance>
			
			<!-- instance for spreadsheet RDF as a static file -->
			<xforms:instance id="spreadsheet-rdf" xxf:exclude-result-prefixes="#default xhtml xforms xs ev xxforms fr res xi nomisma atom exist">
				<rdf:RDF xmlns="" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:nmo="http://nomisma.org/ontology#" xmlns:foaf="http://xmlns.com/foaf/0.1/"
					xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
					xmlns:skos="http://www.w3.org/2004/02/skos/core#" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#" xmlns:void="http://rdfs.org/ns/void#"
					xmlns:xsd="http://www.w3.org/2001/XMLSchema#" xmlns:prov="http://www.w3.org/ns/prov#" xmlns:crm="http://www.cidoc-crm.org/cidoc-crm/"
					xmlns:crmdig="http://www.ics.forth.gr/isl/CRMdig/"/>
			</xforms:instance>
			
			<xforms:instance id="object" xxf:exclude-result-prefixes="#all">
				<nuds xmlns=""/>
			</xforms:instance>

			<xforms:instance id="languages">
				<xi:include href="instances/languages.xml"/>
			</xforms:instance>

			<xforms:instance id="license-list">
				<xi:include href="instances/licenses.xml"/>
			</xforms:instance>

			<xforms:instance id="rights-list">
				<xi:include href="instances/rights.xml"/>
			</xforms:instance>

			<xforms:instance id="request" xxf:exclude-result-prefixes="#all">
				<request/>
			</xforms:instance>

			<!-- XQuery instances -->
			<xforms:instance id="eXist-xquery" xxf:exclude-result-prefixes="#all">
				<exist:query xmlns="">
					<exist:text/>
				</exist:query>
			</xforms:instance>

			<xforms:instance id="xqueries">
				<queries xmlns="">
					<query id="collection-count">
						<![CDATA[xquery version "1.0"; <report>{count(collection())}</report>]]>
					</query>
					<query id="get-objects">
						<![CDATA[xquery version "1.0";
declare namespace nuds = "http://nomisma.org/nuds";
declare namespace nh = "http://nomisma.org/nudsHoard";
declare namespace tei = "http://www.tei-c.org/ns/1.0";
<report>
    {
        for $record in subsequence(collection(), START, 20)
        let $type := $record/*/local-name()
        return
            if ($type = 'nuds') then
                <record>
                    <type>NUDS</type>
                    <maintenanceStatus>{$record/nuds:nuds/nuds:control/nuds:maintenanceStatus/text()}</maintenanceStatus>
                    <publicationStatus>{data($record/nuds:nuds/nuds:control/nuds:publicationStatus)}</publicationStatus>
                    <recordType>{string($record/nuds:nuds/@recordType)}</recordType>
                    <id>{$record//nuds:recordId/text()}</id>
                    <title>{$record//nuds:descMeta/nuds:title[@xml:lang = 'en']/text()}</title>
                    <obverse>
                        {concat($record//nuds:typeDesc/nuds:obverse/nuds:type/nuds:description[@xml:lang = 'en'], '/', $record//nuds:typeDesc/nuds:obverse/nuds:legend)}
                    </obverse>
                    <reverse>
                        {concat($record//nuds:typeDesc/nuds:reverse/nuds:type/nuds:description[@xml:lang = 'en'], '/', $record//nuds:typeDesc/nuds:reverse/nuds:legend)}
                    </reverse>
                    <published>false</published>
                </record>
            else if ($type = 'nudsHoard') then
                    <record>
                        <type>Hoard</type>
                        <maintenanceStatus>{$record/nh:nudsHoard/nh:control/nh:maintenanceStatus/text()}</maintenanceStatus>
                        <publicationStatus>{data($record/nh:nuds/nh:control/nh:publicationStatus)}</publicationStatus>
                        <id>{$record//nh:recordId/text()}</id>
                        <title>{$record//nh:descMeta/nh:title[@xml:lang = 'en']/text()}</title>
                        <published>false</published>
                    </record>
            else if ($type = 'TEI') then 
                    <record>
                        <type>EpiDoc TEI</type>
                        <maintenanceStatus>{data($record//tei:revisionDesc/@status)}</maintenanceStatus>
                        <publicationStatus>{data($record//tei:revisionDesc/@status)}</publicationStatus>
                        <id>{data($record/descendant::tei:idno[@type='filename'])}</id>
                        <title>{data($record//tei:titleStmt/tei:title)}</title>
                        <published>false</published>
                    </record>
                else
                    <record/>
    }
</report>]]>
					</query>
					<query id="collection-metadata">
						<![CDATA[xquery version "1.0";
						let $sequence:= tokenize('%SEQUENCE%', ',')						
						return
						<metadata>
							{
							for $collection-name in $sequence
							let $path:= concat('/db/', $collection-name, '/config.xml')
							return 
								<collection id="{$collection-name}">
									<title>{data(doc($path)/config/title)}</title>
									<description>{data(doc($path)/config/description)}</description>
									<url>{data(doc($path)/config/url)}</url>
								</collection>
							}
						</metadata>]]>
					</query>
					<query id="create-collection">
						<![CDATA[xquery version "1.0";
							declare namespace xmldb="http://exist-db.org/xquery/xmldb";
							let $collection := '/db/%COLLECTION%'
							let $path := '%PATH%'
							let $create-collection := xmldb:create-collection($collection, 'objects')
							let $create-symbols := xmldb:create-collection($collection, 'symbols')
							let $store-xql := xmldb:store-files-from-pattern($collection, concat($path, '/xforms/xquery'), '*.xql', 'application/xquery')
							for $doc in xmldb:get-child-resources($collection)							
							return sm:chmod(xs:anyURI(concat($collection, '/', $doc)), 'rwxrwxrwx')
						]]>
					</query>
					<query id="delete-collection">
						<![CDATA[xquery version "1.0";
							declare namespace xmldb="http://exist-db.org/xquery/xmldb";
							let $collection := '/db/%COLLECTION%'
							return
								xmldb:remove($collection)
						]]>
					</query>
					<query id="query-objects">
						<![CDATA[xquery version "1.0";
declare namespace nuds = "http://nomisma.org/nuds";
declare namespace nh = "http://nomisma.org/nudsHoard";
declare namespace tei = "http://www.tei-c.org/ns/1.0";
<report>
    {
        for $record in collection()[contains(descendant::*[local-name() = 'recordId'], 'QUERY') or descendant::*[local-name() = 'title'] = 'QUERY']
        let $type := $record/*/local-name()
        return
            if ($type = 'nuds') then
                <record>
                    <type>NUDS</type>
                    <maintenanceStatus>{$record/nuds:nuds/nuds:control/nuds:maintenanceStatus/text()}</maintenanceStatus>
                    <publicationStatus>{data($record/nuds:nuds/nuds:control/nuds:publicationStatus)}</publicationStatus>
                    <recordType>{string($record/nuds:nuds/@recordType)}</recordType>
                    <id>{$record//nuds:recordId/text()}</id>
                    <title>{$record//nuds:descMeta/nuds:title[@xml:lang = 'en']/text()}</title>
                    <obverse>
                        {concat($record//nuds:typeDesc/nuds:obverse/nuds:type/nuds:description[@xml:lang = 'en'], '/', $record//nuds:typeDesc/nuds:obverse/nuds:legend)}
                    </obverse>
                    <reverse>
                        {concat($record//nuds:typeDesc/nuds:reverse/nuds:type/nuds:description[@xml:lang = 'en'], '/', $record//nuds:typeDesc/nuds:reverse/nuds:legend)}
                    </reverse>
                    <published>false</published>
                </record>
            else
                if ($type = 'nudsHoard') then
                    <record>
                        <type>Hoard</type>
                        <maintenanceStatus>
                            {$record/nh:nudsHoard/nh:control/nh:maintenanceStatus/text()}</maintenanceStatus>
                        <publicationStatus>{data($record/nh:nuds/nh:control/nh:publicationStatus)}</publicationStatus>
                        <id>{$record//nh:recordId/text()}</id>
                        <title>{$record//nh:descMeta/nh:title[@xml:lang = 'en']/text()}</title>
                        <published>false</published>
                    </record>
                else
                    if ($type = 'TEI') then
                        <record>
                            <type>EpiDoc TEI</type>
                            <maintenanceStatus>{data($record//tei:revisionDesc/@status)}</maintenanceStatus>
                            <publicationStatus>{data($record//tei:revisionDesc/@status)}</publicationStatus>
                            <id>{data($record/descendant::tei:idno[@type='filename'])}</id>
                            <title>{data($record//tei:titleStmt/tei:title)}</title>
                            <published>false</published>
                        </record>
                    else
                        <record/>
    }
</report>]]>
					</query>
					<query id="publish-all">
						<![CDATA[xquery version "1.0";
						declare namespace tei = "http://www.tei-c.org/ns/1.0";
						<report> { 
							for $i at $position in collection()[descendant::*[local-name()='publicationStatus'] = 'approved' or descendant::*[local-name()='publicationStatus'] = 'approvedSubtype' or descendant::tei:revisionDesc/@status = 'approved']
								return concat(if ($i//*:recordId) then data($i//*:recordId) else data($i/descendant::tei:idno[@type='filename']), if ($position mod COUNT = 0) then ',' else '|') 
							}
						</report>]]>
					</query>
				</queries>
			</xforms:instance>

			<xforms:instance id="pagination-result">
				<exist:result/>
			</xforms:instance>

			<xforms:instance id="xquery-result">
				<exist:result/>
			</xforms:instance>

			<!-- solr response for id query -->
			<xforms:instance id="published-response">
				<response xmlns=""/>
			</xforms:instance>
			<xforms:instance id="list-published-response">
				<response xmlns=""/>
			</xforms:instance>
			<xforms:instance id="is-published">
				<response xmlns=""/>
			</xforms:instance>

			<!-- send to Solr -->
			<xforms:instance id="addIndex" xxf:exclude-result-prefixes="#all">
				<add xmlns=""/>
			</xforms:instance>

			<!-- Instance for Solr commit-->
			<xforms:instance id="sendCommit">
				<commit/>
			</xforms:instance>

			<!-- Solr optimize -->
			<xforms:instance id="optimizeIndex">
				<optimize/>
			</xforms:instance>

			<!-- delete from Solr -->
			<xforms:instance id="deleteId">
				<delete xmlns="">
					<query/>
				</delete>
			</xforms:instance>
			<xforms:instance id="deleteAll">
				<delete xmlns="">
					<query/>
				</delete>
			</xforms:instance>

			<xforms:instance id="dump">
				<dump xmlns=""/>
			</xforms:instance>

			<!-- ************************* BINDINGS ************************** -->
			<xforms:bind nodeset="instance('control-instance')">
				<xforms:bind id="create-collection-trigger" nodeset="create-collection-trigger" type="xs:boolean" readonly=". != true()"/>
				<xforms:bind id="save-trigger" nodeset="save-trigger" type="xs:boolean" readonly=". != true()"/>
			</xforms:bind>

			<xforms:bind nodeset="instance('collections-list')"
				constraint="count(//@name) = count(distinct-values(//@name)) and count(//@role) = count(distinct-values(//@role))">
				<xforms:bind nodeset="collection">
					<xforms:bind nodeset="@name" required="true()" type="xs:ID"/>
					<xforms:bind nodeset="@role" required="true()" type="xs:ID"/>
				</xforms:bind>
			</xforms:bind>

			<xforms:bind nodeset="instance('config-template')">
				<xforms:bind nodeset="title" required="true()"/>
				<xforms:bind nodeset="description" required="true()"/>
				<xforms:bind nodeset="collection_type" required="true()"/>
				<xforms:bind nodeset="installation_path" required="true()"/>
				<xforms:bind nodeset="url" required="true()" constraint="matches(., 'https?://.+')"/>
				<xforms:bind nodeset="solr_published" required="true()" constraint="matches(., 'https?://.+')"/>
				<xforms:bind nodeset="template">
					<!-- about the electronic record -->
					<xforms:bind nodeset="agencyName" required="true()"/>
					<xforms:bind nodeset="language" required="true()"/>
					<xforms:bind nodeset="license" required="true()"/>
					<xforms:bind nodeset="rights" required="true()"/>
				</xforms:bind>
				
			</xforms:bind>

			<xforms:bind nodeset="instance('config')">
				<xforms:bind nodeset="union_type_catalog">
					<xforms:bind nodeset="@enabled" type="xs:boolean"/>
				</xforms:bind>
				<xforms:bind nodeset="facets/facet">
					<xforms:bind nodeset="@role" required="true()"/>
					<xforms:bind nodeset="@type" required="true()"/>
				</xforms:bind>
			</xforms:bind>

			<xforms:bind nodeset="instance('pagination-result')">
				<xforms:bind nodeset="//record">
					<xforms:bind nodeset="published" type="xs:boolean" readonly="../publicationStatus = 'approvedSubtype'"/>
				</xforms:bind>
			</xforms:bind>

			<!-- **************** DYNAMIC VALIDATION CONTROLS ********************** -->
			<xforms:action ev:event="xxforms-invalid" ev:observer="collections-list">
				<xforms:setvalue ref="instance('control-instance')/create-collection-trigger" value="false()"/>
			</xforms:action>

			<xforms:action ev:event="xxforms-valid" ev:observer="collections-list">
				<xforms:setvalue ref="instance('control-instance')/create-collection-trigger" value="true()"
					if="xxf:valid(instance('config-template'), true())"/>
			</xforms:action>

			<xforms:action ev:event="xxforms-invalid" ev:observer="config-template">
				<xforms:setvalue ref="instance('control-instance')/create-collection-trigger" value="false()"/>
			</xforms:action>

			<xforms:action ev:event="xxforms-valid" ev:observer="config-template">
				<xforms:setvalue ref="instance('control-instance')/create-collection-trigger" value="true()"
					if="xxf:valid(instance('collections-list'), true())"/>
			</xforms:action>
			
			<xforms:action ev:event="xxforms-invalid" ev:observer="config">
				<xforms:setvalue ref="instance('control-instance')/save-trigger" value="false()"/>
			</xforms:action>
			
			<xforms:action ev:event="xxforms-valid" ev:observer="config">
				<xforms:setvalue ref="instance('control-instance')/save-trigger" value="true()"/>
			</xforms:action>

			<!-- ************************* SUBMISSIONS ************************** -->
			<!-- load collections/roles config -->
			<xforms:submission id="load-collections" serialization="none" method="get" resource="{instance('exist-config')/url}collections-list.xml"
				replace="instance" instance="collections-list" xxf:username="{instance('exist-config')/username}"
				xxf:password="{instance('exist-config')/password}">
				<!-- if the config loads successfully, set the collection names based on authentication -->
				<xforms:action ev:event="xforms-submit-done">
					<!-- proceed with setting the interface for collection editing -->
					<xforms:action if="not(instance('control-instance')/request-security/role = 'numishare-admin')">
						<!-- if there is an eXist-db collection name that matches the associated Tomcat role -->
						<xforms:action if="string(instance('collections-list')/collection[@role=instance('control-instance')/request-security/role]/@name)">
							<xforms:setvalue ref="instance('control-instance')/collection-name"
								value="instance('collections-list')/collection[@role=instance('control-instance')/request-security/role]/@name"/>
							<!-- set interface -->
							<xforms:setvalue ref="instance('control-instance')/interface">numishare-editor</xforms:setvalue>
							<!-- load config -->
							<xforms:send submission="load-config"/>
						</xforms:action>
						<!-- if there is not a collection matching the role, display the appropriate interface -->
						<xforms:action if="not(string(instance('collections-list')/collection[@role=instance('control-instance')/request-security/role]/@name))">
							<!-- set interface -->
							<xforms:setvalue ref="instance('control-instance')/interface">unauthorized-user</xforms:setvalue>
						</xforms:action>
					</xforms:action>
					<xforms:action if="instance('control-instance')/request-security/role = 'numishare-admin'">
						<!-- get collection metadata -->
						<xforms:setvalue ref="instance('eXist-xquery')/exist:text"
							value="replace(instance('xqueries')/query[@id='collection-metadata'], '%SEQUENCE%', string-join(instance('collections-list')/collection/@name, ','))"/>
						<xforms:send submission="xquery-db"/>

						<!-- set interface: if there is a session attribute for collection-name, then load the editor interface. otherwise load numishare-admin interface -->
						<xforms:action if="string(xxf:get-session-attribute('collection-name'))">
							<xforms:setvalue ref="instance('control-instance')/collection-name" value="xxf:get-session-attribute('collection-name')"/>
							<xforms:setvalue ref="instance('control-instance')/interface">numishare-editor</xforms:setvalue>
							<xforms:send submission="load-config"/>
						</xforms:action>
						<xforms:action if="not(string(xxf:get-session-attribute('collection-name')))">
							<xforms:setvalue ref="instance('control-instance')/interface">numishare-admin</xforms:setvalue>
						</xforms:action>

					</xforms:action>
				</xforms:action>
				<!-- if there isn't a collection list XML, then this is the first time Numishare has been run. If the role is numishare-admin display the collection creation interface, otherwise block editing to unauthorized individuals -->
				<xforms:action ev:event="xforms-submit-error">
					<!-- set interface -->
					<xforms:setvalue ref="instance('control-instance')/interface">numishare-admin</xforms:setvalue>
				</xforms:action>
			</xforms:submission>

			<xforms:submission id="save-collections" ref="instance('collections-list')" resource="{instance('exist-config')/url}/collections-list.xml"
				method="put" replace="none" xxf:username="{instance('exist-config')/username}" xxf:password="{instance('exist-config')/password}">
				<xforms:message ev:event="xforms-submit-error" level="modal">Error Saving Collections List.</xforms:message>
			</xforms:submission>

			<!-- loading, saving config -->
			<xforms:submission id="load-config" serialization="none" method="get"
				resource="{instance('exist-config')/url}{instance('control-instance')/collection-name}/config.xml" replace="instance" instance="config"
				xxf:username="{instance('exist-config')/username}" xxf:password="{instance('exist-config')/password}">
				<xforms:action ev:event="xforms-submit-done">
					
					<!-- evaluate the config to identify whether it is a union type corpus or not -->
					<xforms:action if="instance('config')/union_type_catalog/@enabled = true()">
						<xforms:toggle case="union_type_catalog"/>
					</xforms:action>
					<xforms:action if="not(instance('config')/union_type_catalog/@enabled = true())">
						<!-- get the number of docs in the eXist collection() -->
						<xforms:setvalue ref="instance('eXist-xquery')/exist:text" value="instance('xqueries')/query[@id='collection-count']"/>
						<xforms:send submission="xquery-collection"/>
						<xforms:setvalue ref="instance('control-instance')/numFound" value="number(instance('xquery-result'))"/>
						<!-- set value in control instance -->
						
						<xforms:var name="end" select="if(instance('control-instance')/numFound &gt; 20) then 20 else instance('control-instance')/numFound"/>
						<!-- get list of files for page 1, replacing START and END -->
						<xforms:setvalue ref="instance('eXist-xquery')/exist:text" value="replace(instance('xqueries')/query[@id='get-objects'], 'START', '1')"/>
						<xforms:send submission="xquery-pagination"/>
						
						<xforms:toggle case="collection-interface"/>
						
						<!-- show the facet classification popup if there are no classifications -->
						<xforms:action if="not(instance('config')/facets/facet[@type])">
							
							<!-- insert required attribute into facets -->
							<xforms:action xxf:iterate="instance('config')/facets/facet">
								<xforms:insert context="context()" origin="xforms:attribute('role', '')" if="not(@role)"/> 
								<xforms:insert context="context()" origin="xforms:attribute('type', '')" if="not(@type)"/>
							</xforms:action>
						
							<xxf:show dialog="facet-class-dialog"/>
						</xforms:action>
					</xforms:action>
				</xforms:action>
				<!-- if config.xml doesn't exist, then create the exist collection with necessary files -->
				<xforms:message ev:event="xforms-submit-error" level="model">Error: there is no config for this collection.</xforms:message>
			</xforms:submission>

			<xforms:submission id="save-config" ref="instance('config-template')"
				resource="{instance('exist-config')/url}{instance('control-instance')/collection-name}/config.xml" method="put" replace="none"
				xxf:username="{instance('exist-config')/username}" xxf:password="{instance('exist-config')/password}">
				<xforms:message ev:event="xforms-submit-error" level="modal">Error Saving Config.</xforms:message>
				<xforms:action ev:event="xforms-submit-done">
					<!-- create eXist-db collections, config file, and XQuery files -->
					<xforms:setvalue ref="instance('eXist-xquery')/exist:text"
						value="replace(replace(instance('xqueries')/query[@id='create-collection'], '%COLLECTION%', instance('control-instance')/collection-name), '%PATH%', instance('config-template')/installation_path)"/>
					<xforms:send submission="xquery-db"/>
					
					<!-- save spreadsheet RDF -->
					<xforms:send submission="save-spreadsheet-rdf"/>

					<!-- submit collection metadata once again before switching the interface -->
					<xforms:action ev:event="xforms-submit-done">
						<xforms:setvalue ref="instance('eXist-xquery')/exist:text"
							value="replace(instance('xqueries')/query[@id='collection-metadata'], '%SEQUENCE%', string-join(instance('collections-list')/collection/@name, ','))"/>
						<xforms:send submission="xquery-db"/>
					</xforms:action>
				</xforms:action>
			</xforms:submission>
			
			<xforms:submission id="save-spreadsheet-rdf" ref="instance('spreadsheet-rdf')" xxf:username="{instance('exist-config')/username}"
				xxf:password="{instance('exist-config')/password}"
				action="{instance('exist-config')/url}{instance('control-instance')/collection-name}/spreadsheets.rdf" method="put" replace="none">
				<xforms:message ev:event="xforms-submit-error" level="modal">Error saving spreadsheet RDF.</xforms:message>				
			</xforms:submission>

			<!--***************** XQUERY ******************-->
			<!-- xquery for getting and processing query results into pages of items -->
			<xforms:submission id="xquery-pagination" ref="instance('eXist-xquery')"
				resource="{instance('exist-config')/url}{instance('control-instance')/collection-name}/objects" method="post" replace="instance"
				instance="pagination-result" xxf:username="{instance('exist-config')/username}" xxf:password="{instance('exist-config')/password}">
				<xforms:setvalue ref="instance('control-instance')/error" ev:event="xforms-submit-error">Error querying eXist database.</xforms:setvalue>
				<xforms:action ev:event="xforms-submit-done">
					<!--iterate through docs, check for publication -->
					<xforms:action xxf:iterate="instance('pagination-result')//record">
						<xforms:setvalue ref="instance('control-instance')/id" value="context()/id"/>
						<xforms:send submission="query-solr-for-publication"/>
					</xforms:action>
				</xforms:action>
			</xforms:submission>

			<xforms:submission id="xquery-collection" ref="instance('eXist-xquery')"
				resource="{instance('exist-config')/url}{instance('control-instance')/collection-name}/objects" method="post" replace="instance"
				instance="xquery-result" xxf:username="{instance('exist-config')/username}" xxf:password="{instance('exist-config')/password}">
				<xforms:setvalue ref="instance('control-instance')/error" ev:event="xforms-submit-error">Error querying eXist database.</xforms:setvalue>
			</xforms:submission>

			<xforms:submission id="xquery-db" ref="instance('eXist-xquery')" resource="{instance('exist-config')/url}" method="post" replace="instance"
				instance="xquery-result" xxf:username="{instance('exist-config')/username}" xxf:password="{instance('exist-config')/password}">
				<xforms:setvalue ref="instance('control-instance')/error" ev:event="xforms-submit-error">Error querying eXist database.</xforms:setvalue>
			</xforms:submission>
			<!-- ************************* CRUD ON OBJECT RECORDS ********************** -->
			<!-- update publication status -->
			<xforms:submission id="load-object" serialization="none" method="get"
				resource="{instance('exist-config')/url}{instance('control-instance')/collection-name}/objects/{instance('control-instance')/id}.xml"
				xxf:username="{instance('exist-config')/username}" xxf:password="{instance('exist-config')/password}" replace="instance"
				instance="object">
				<xforms:message ev:event="xforms-submit-error" level="modal">Error loading file.</xforms:message>
				<xforms:action ev:event="xforms-submit-done">
					<xforms:setvalue ref="instance('object')/nuds:control/nuds:publicationStatus" value="instance('control-instance')/publicationStatus"/>
					<xforms:send submission="save-object"/>
				</xforms:action>
			</xforms:submission>

			<xforms:submission id="save-object" ref="instance('object')" xxf:username="{instance('exist-config')/username}"
				xxf:password="{instance('exist-config')/password}"
				resource="{instance('exist-config')/url}{instance('control-instance')/collection-name}/objects/{instance('control-instance')/id}.xml"
				method="put" replace="none">
				<xforms:message ev:event="xforms-submit-error" level="modal">Error saving file.</xforms:message>
			</xforms:submission>

			<xforms:submission id="delete-object"
				resource="{instance('exist-config')/url}{instance('control-instance')/collection-name}/objects/{instance('control-instance')/id}.xml"
				method="delete" replace="none" xxf:username="{instance('exist-config')/username}" xxf:password="{instance('exist-config')/password}">
				<xforms:setvalue ev:event="xforms-submit-done" ref="instance('control-instance')/status">Object successfully deleted.</xforms:setvalue>
			</xforms:submission>

			<!-- ************************* SOLR SUBMISSIONS ************************** -->			
			<!-- access service to read in pre-transformed solr doc -->
			<xforms:submission id="nuds-to-solr" method="get" replace="instance" instance="addIndex" serialization="none"
				resource="/numishare/{instance('control-instance')/collection-name}/id/{instance('control-instance')/id}.solr">
				<xforms:message ev:event="xforms-submit-error" level="modal">Error transforming XML record to Solr document.</xforms:message>
				<xforms:send ev:event="xforms-submit-done" submission="post-solr-doc"/>
			</xforms:submission>

			<!-- post instance to Solr -->
			<xforms:submission id="post-solr-doc" resource="{instance('config')/solr_published}update" ref="instance('addIndex')" instance="addIndex"
				replace="instance" method="post">
				<xforms:message ev:event="xforms-submit-error" level="modal">Data Failed to POST to Solr. Index may be offline or URL is
					incorrect.</xforms:message>
				<xforms:setvalue ev:event="xforms-submit-done" ref="instance('control-instance')/status">Successfully published to Solr.</xforms:setvalue>
			</xforms:submission>

			<!-- delete from Solr -->
			<xforms:submission id="delete-solr-doc" resource="{instance('config')/solr_published}update" ref="instance('deleteId')" instance="deleteId"
				replace="none" method="post">
				<xforms:action ev:event="xforms-submit-done">
					<xforms:setvalue ref="instance('control-instance')/status">Successfully deleted document from Solr.</xforms:setvalue>
					<xforms:send submission="submit-commit"/>
				</xforms:action>
				<xforms:message ev:event="xforms-submit-error" level="modal">Data Failed to POST to Solr.</xforms:message>
			</xforms:submission>

			<xforms:submission id="delete-all" resource="{instance('config')/solr_published}update" ref="instance('deleteAll')" instance="deleteAll"
				replace="none" method="post">
				<xforms:message ev:event="xforms-submit-error" level="modal">Error issuing delete query</xforms:message>
				<xforms:action ev:event="xforms-submit-done">
					<xforms:send submission="submit-commit"/>
					<xforms:setvalue ref="instance('control-instance')/status">Objects removed from search index.</xforms:setvalue>
				</xforms:action>
			</xforms:submission>

			<!-- pass identifiers URL parameter to xquery process in Cocoon to generate large Solr add document -->
			<xforms:submission id="generate-add-document" method="get" replace="instance" instance="addIndex" serialization="none"
				resource="/numishare/{instance('control-instance')/collection-name}/ingest?identifiers={instance('control-instance')/identifiers}">
				<xforms:message ev:event="xforms-submit-error" level="modal">Error getting Solr document from XQuery ingestion pipeline.</xforms:message>
				<xforms:action ev:event="xforms-submit-done">
					<xforms:send submission="post-solr-doc"/>
				</xforms:action>
			</xforms:submission>

			<!-- send commit -->
			<xforms:submission id="submit-commit" resource="{instance('config')/solr_published}update" ref="instance('sendCommit')" instance="sendCommit"
				replace="none" method="post">
				<xforms:message ev:event="xforms-submit-error" level="modal">Failed to commit to Solr index.</xforms:message>
			</xforms:submission>

			<!-- send optimize -->
			<xforms:submission id="optimize" resource="{instance('config')/solr_published}update" ref="instance('optimizeIndex')" instance="optimizeIndex"
				replace="none" method="post">
				<xforms:message ev:event="xforms-submit-error" level="modal">Failed to optimize Solr index.</xforms:message>
			</xforms:submission>

			<!-- submission to query solr to see if the document is published -->
			<xforms:submission id="query-solr-for-publication" serialization="none" method="get"
				resource="{instance('config')/solr_published}select/?q=collection-name:{instance('control-instance')/collection-name} AND id:&#x022;{instance('control-instance')/id}&#x022;"
				replace="instance" instance="published-response">
				<!-- if the document is found in solr, get the updated solr doc -->
				<xforms:setvalue ev:event="xforms-submit-done" if="instance('published-response')/result[@name='response']/@numFound = '1'"
					ref="instance('pagination-result')//record[id=instance('control-instance')/id]/published" value="true()"/>
			</xforms:submission>

			<!-- ************************* XFORMS-MODEL-CONSTRUCT-DONE ************************** -->
			<xforms:action ev:event="xforms-model-construct-done">
				<!-- load numishare config file on xforms construction -->
				<xforms:insert context="instance('control-instance')" nodeset="collection-name" position="after"
					origin="xxf:call-xpl('oxf:/apps/numishare/xpl/get-authentication.xpl', 'dump', instance('dump'), 'data')"/>

				<!-- if authentication has not been enabled, trigger a case -->
				<xforms:action if="not(string(instance('control-instance')/request-security/role))">
					<!-- set interface -->
					<xforms:setvalue ref="instance('control-instance')/interface">unauthorized-user</xforms:setvalue>
				</xforms:action>
				<xforms:action if="string(instance('control-instance')/request-security/role)">
					<xforms:send submission="load-collections"/>
				</xforms:action>
			</xforms:action>

			<!-- ************************* XFORMS-READY ************************** -->
			<!-- set case on xforms-ready -->
			<xforms:action ev:event="xforms-ready">
				<xforms:toggle case="{instance('control-instance')/interface}"/>
			</xforms:action>
			
			
		</xforms:model>
	</head>
	<body>
		<xforms:var name="display_path">./</xforms:var>
		<xforms:group ref=".[not(instance('control-instance')/interface = 'unauthorized-user')]">
			<xi:include href="header.xml"/>
		</xforms:group>
		<div class="container-fluid">
			<div class="row">
				<div class="col-md-12">
					<xforms:switch>
						<xforms:case id="unauthorized-user">
							<h2>Unauthorized User</h2>
							<p>You are seeing this interface either because authentication has not been enabled for the Numishare administrative panel or there
								is no matching eXist-db collection for your role. If it is the latter case, please log in as the numishare-admin role and create
								a new collection for the associated Tomcat role.</p>
						</xforms:case>
						<xforms:case id="numishare-admin">
							<div>
								<xforms:group
									ref=".[count(distinct-values(instance('collections-list')/collection/@name)) != count(instance('collections-list')/collection/@name)]">
									<div class="alert alert-box alert-danger">
										<span class="glyphicon glyphicon-exclamation-sign"></span>
										<strong>Alert:</strong> Collection of this name already exists.</div>
								</xforms:group>
								<xforms:group
									ref=".[count(distinct-values(instance('collections-list')/collection/@role)) != count(instance('collections-list')/collection/@role)]">
									<div class="alert alert-box alert-warning">
										<span class="glyphicon glyphicon-exclamation-sign"></span>
										<strong>Alert:</strong>A role cannot be bound to more than one collection.</div>
								</xforms:group>
								<xforms:group ref=".[instance('control-instance')/status/text()]">
									<div class="alert alert-box alert-success">
										<p><span class="glyphicon glyphicon-info-sign"></span>
											<strong>Status:</strong>
											<xforms:output ref="instance('control-instance')/status"/>
										</p>
									</div>
								</xforms:group>
								<h2>Numishare Administration</h2>
								<xforms:switch>
									<xforms:case id="collections-list-interface">
										<div>
											<xforms:group ref=".[count(instance('collections-list')/collection) &gt; 0]">
												<xforms:group ref="instance('collections-list')">
													<h3>Collections List<small><xforms:trigger appearance="minimal"><xforms:label><span
																		class="glyphicon glyphicon-plus"></span>Add collection</xforms:label><xforms:action
																	ev:event="DOMActivate">
																	<xforms:insert context="instance('collections-list')" nodeset="./child::node()[last()]"
																		origin="xforms:element('collection', (xforms:attribute('name', ''), xforms:attribute('role', '')))"/>
																	<xforms:toggle case="add-collection-interface"/>
																</xforms:action></xforms:trigger></small></h3>
													<table class="table">
														<thead>
															<tr>
																<th>Collection</th>
																<th>Role</th>
																<th>Title</th>
																<th style="width:50%">Description</th>
																<th>Actions</th>
															</tr>
														</thead>
														<tbody>
															<xforms:repeat nodeset="collection">
																<xforms:var name="name" select="@name"/>
																<tr>
																	<td>
																		<xforms:output ref="$name"/>
																	</td>
																	<td>
																		<xforms:output ref="@role"/>
																	</td>
																	<td>
																		<xforms:trigger appearance="minimal">
																			<xforms:label value="instance('xquery-result')//collection[@id=$name]/title"/>
																			<xforms:load ev:event="DOMActivate"
																				ref=" instance('xquery-result')//collection[@id=$name]/url" show="new"/>
																		</xforms:trigger>
																	</td>
																	<td>
																		<xforms:output ref="instance('xquery-result')//collection[@id=$name]/description"/>
																	</td>
																	<td>
																		<xforms:trigger appearance="minimal">
																			<xforms:label><span class="glyphicon glyphicon-pencil"></span></xforms:label>
																			<xforms:hint>Edit Collection</xforms:hint>
																			<xforms:action ev:event="DOMActivate">
																				<!-- set session attribute of the selected collection name -->
																				<xforms:setvalue ref="instance('control-instance')/collection-name"
																				value="$name"/>
																				<xforms:insert context="."
																				origin="xxf:set-session-attribute('collection-name', string(instance('control-instance')/collection-name))"/>
																				<!-- load the associated config and display the Numishare editor interface -->
																				<xforms:send submission="load-config"/>
																				
																				<xforms:toggle case="numishare-editor"/>
																			</xforms:action>
																		</xforms:trigger>
																		<xforms:trigger appearance="minimal">
																			<xforms:label><span class="glyphicon glyphicon-trash"></span></xforms:label>
																			<xforms:hint>Delete Collection</xforms:hint>
																			<xforms:action ev:event="DOMActivate">
																				<xforms:setvalue ref="instance('control-instance')/collection-name"
																				value="$name"/>
																				<xforms:dispatch target="delete-collection-dialog" name="fr-show"/>
																			</xforms:action>
																		</xforms:trigger>
																	</td>
																</tr>
															</xforms:repeat>
														</tbody>
													</table>
												</xforms:group>
											</xforms:group>
											<xforms:group ref=".[count(instance('collections-list')/collection) = 0]">
												<p>There are no collections in Numishare. <xforms:trigger appearance="minimal"><xforms:label><span
																class="glyphicon glyphicon-plus"></span>Add one.</xforms:label><xforms:action
															ev:event="DOMActivate">
															<xforms:insert context="instance('collections-list')" nodeset="./child::node()[last()]"
																origin="xforms:element('collection', (xforms:attribute('name', ''), xforms:attribute('role', '')))"/>
															<xforms:toggle case="add-collection-interface"/>
														</xforms:action></xforms:trigger></p>
											</xforms:group>
										</div>
									</xforms:case>
									<xforms:case id="add-collection-interface">
										<div>
											<h3>Add New Collection</h3>
											<div>
												<xforms:group ref="instance('collections-list')/collection[last()]">
													<div>
														<xforms:input ref="@role">
															<xforms:label>Tomcat Role</xforms:label>
															<xforms:alert>Must conform to xs:ID</xforms:alert>
														</xforms:input>
													</div>
													<div>
														<xforms:input ref="@name">
															<xforms:label>Collection Name</xforms:label>
															<xforms:alert>Must conform to xs:ID</xforms:alert>
															<xforms:action ev:event="xforms-value-changed">
																<xforms:var name="name" select="."/>
																<xforms:setvalue ref="instance('config-template')/url"
																	value="concat('http://localhost:8080/orbeon/numishare/', $name, '/')"/>
																<xforms:setvalue ref="instance('config-template')/uri_space"
																	value="concat('http://localhost:8080/orbeon/numishare/', $name, '/id/')"/>
															</xforms:action>
														</xforms:input>
													</div>
												</xforms:group>
												<xforms:group ref="instance('config-template')">
													<div>
														<xforms:input ref="installation_path">
															<xforms:label>Installation Directory</xforms:label>
															<xforms:alert>Required</xforms:alert>
														</xforms:input>
														<p class="text-muted">The absolute path to the directory to which Numishare was installed. This is
															necessary for writing XQuery files from the disk into the eXist-db collection.</p>
													</div>
													<h4>Boilerplate</h4>
													<div>
														<xforms:input ref="title">
															<xforms:label>Collection Title</xforms:label>
															<xforms:alert>Required</xforms:alert>
														</xforms:input>
													</div>
													<div>
														<xforms:input ref="description">
															<xforms:label>Description</xforms:label>
															<xforms:alert>Required</xforms:alert>
														</xforms:input>
													</div>
													<div>
														<xforms:select1 ref="collection_type">
															<xforms:label>Collection Type</xforms:label>
															<xforms:item>
																<xforms:label>Object</xforms:label>
																<xforms:value>object</xforms:value>
															</xforms:item>
															<xforms:item>
																<xforms:label>Coin Type</xforms:label>
																<xforms:value>cointype</xforms:value>
															</xforms:item>
															<xforms:item>
																<xforms:label>Die Study</xforms:label>
																<xforms:value>die</xforms:value>
															</xforms:item>
															<xforms:item>
																<xforms:label>Hoard</xforms:label>
																<xforms:value>hoard</xforms:value>
															</xforms:item>
															<xforms:alert>Required</xforms:alert>
															
															<xforms:action ev:event="xforms-value-changed">
																<xforms:var name="val" select="."/>
																
																<xforms:setvalue ref="instance('config-template')/pages/compare/@enabled" value="false()" if="$val != 'object'"/>
																<xforms:setvalue ref="instance('config-template')/pages/compare/@enabled" value="true()" if="$val = 'object'"/>
															</xforms:action>
														</xforms:select1>
													</div>
													<div>
														<xforms:input ref="template/agencyName">
															<xforms:label>Maintainer</xforms:label>
															<xforms:alert>Required</xforms:alert>
															<xforms:hint>The agent responsible for maintaining the data.</xforms:hint>
														</xforms:input>
													</div>
													<div>
														<xforms:select1 ref="template/language">
															<xforms:label>Default Language</xforms:label>
															<xforms:item>
																<xforms:label>Select Language...</xforms:label>
																<xforms:value/>
															</xforms:item>
															<xforms:itemset nodeset="instance('languages')//language">
																<xforms:label ref="."/>
																<xforms:value ref="@value"/>
															</xforms:itemset>
															<xforms:alert>Required</xforms:alert>
														</xforms:select1>
													</div>
													<div>
														<xforms:select1 ref="template/rights">
															<xforms:label>Rights Statement</xforms:label>
															<xforms:alert>Required</xforms:alert>
															<xforms:item>
																<xforms:label>Select License...</xforms:label>
																<xforms:value/>
															</xforms:item>
															<xforms:itemset nodeset="instance('rights-list')/statement">
																<xforms:label ref="."/>
																<xforms:value ref="@value"/>
															</xforms:itemset>
														</xforms:select1>
													</div>
													<div>
														<xforms:select1 ref="template/license[@for='images']">
															<xforms:label>Image License</xforms:label>
															<xforms:alert>Required</xforms:alert>
															<xforms:item>
																<xforms:label>Select License...</xforms:label>
																<xforms:value/>
															</xforms:item>
															<xforms:itemset nodeset="instance('license-list')/images/statement">
																<xforms:label ref="."/>
																<xforms:value ref="@value"/>
															</xforms:itemset>
														</xforms:select1>
													</div>
													<div>
														<xforms:select1 ref="template/license[@for='data']">
															<xforms:label>Data License</xforms:label>
															<xforms:alert>Required</xforms:alert>
															<xforms:item>
																<xforms:label>Select License...</xforms:label>
																<xforms:value/>
															</xforms:item>
															<xforms:itemset nodeset="instance('license-list')/data/statement">
																<xforms:label ref="."/>
																<xforms:value ref="@value"/>
															</xforms:itemset>
														</xforms:select1>
													</div>
													<h4>URLS</h4>
													<div>
														<xforms:input ref="url">
															<xforms:label>Public Site</xforms:label>
															<xforms:alert>Required, must be a URL</xforms:alert>
															<xforms:action ev:event="xforms-value-changed">
																<xforms:var name="uri" select="."/>
																<xforms:setvalue ref="instance('config-template')/uri_space" value="concat($uri, 'id/')"/>
															</xforms:action>
														</xforms:input>
													</div>
													<div>
														<xforms:input ref="solr_published">
															<xforms:label>Solr Published</xforms:label>
															<xforms:alert>Required, must be a URL</xforms:alert>
															<xforms:hint>Unlikely to need changing.</xforms:hint>
														</xforms:input>
													</div>
												</xforms:group>
												<xforms:trigger>
													<xforms:label>Cancel</xforms:label>
													<xforms:action ev:event="DOMActivate">
														<xforms:delete nodeset="instance('collections-list')/collection[last()]"/>
														<xforms:toggle case="collections-list-interface"/>
													</xforms:action>
												</xforms:trigger>
												<xforms:trigger bind="create-collection-trigger">
													<xforms:label>Create</xforms:label>
													<xforms:action ev:event="DOMActivate">
														<!-- save collections list, config, and XQL files -->
														<xforms:send submission="save-collections"/>
														<xforms:action ev:event="xforms-submit-done">
															<xforms:setvalue ref="instance('control-instance')/status">Collection successfully created in
																eXist-db.</xforms:setvalue>
															<xforms:setvalue ref="instance('control-instance')/collection-name"
																value="instance('collections-list')/collection[last()]/@name"/>
															<xforms:send submission="save-config"/>
														</xforms:action>
														<xforms:toggle case="collections-list-interface"/>
													</xforms:action>
												</xforms:trigger>
											</div>
										</div>
									</xforms:case>
								</xforms:switch>
							</div>
						</xforms:case>
						<xforms:case id="numishare-editor">
							<div>
								
								<xforms:group ref=".[xxf:is-user-in-role('numishare-admin')]">
									<div>
										<xforms:trigger appearance="minimal">
											<xforms:label><span class="glyphicon glyphicon-arrow-left"></span> Return to Collections List</xforms:label>
											<xforms:action ev:event="DOMActivate">
												<!-- clear session attributes -->
												<xforms:setvalue ref="instance('control-instance')/collection-name"/>
												<xforms:insert context="." origin="xxf:set-session-attribute('collection-name', '')"/>
												<!-- get collection metadata -->
												<xforms:setvalue ref="instance('eXist-xquery')/exist:text"
													value="replace(instance('xqueries')/query[@id='collection-metadata'], '%SEQUENCE%', string-join(instance('collections-list')/collection/@name, ','))"/>
												<xforms:send submission="xquery-db"/>
												<xforms:action ev:event="xforms-submit-done">
													<xforms:toggle case="numishare-admin"/>
												</xforms:action>
											</xforms:action>
										</xforms:trigger>
									</div>
								</xforms:group>
								<xforms:group ref=".[instance('control-instance')/status/text()]">
									<div class="alert alert-box alert-success">
										<p><span class="glyphicon glyphicon-info-sign"></span>
											<strong>Status:</strong>
											<xforms:output ref="instance('control-instance')/status"/>
										</p>
									</div>
								</xforms:group>
								
								<xforms:switch>
									<xforms:case id="collection-interface">										
										<h2>Object Management</h2>
										<ul>
											<li>
												<a href="edit/coin/">Create New Coin or Medal</a>
											</li>
											<li>
												<a href="import/">Import from Google Spreadsheet</a>
											</li>
										</ul>
										<h2>Publication</h2>
										<ul>
											<li>
												<xforms:trigger appearance="minimal">
													<xforms:label>Publish All Approved Objects</xforms:label>
													<xforms:dispatch target="publish-all-dialog" name="fr-show" ev:event="DOMActivate"/>
												</xforms:trigger>
											</li>											
											<li>
												<xforms:trigger appearance="minimal">
													<xforms:label>Unpublish All Objects</xforms:label>
													<xforms:dispatch target="unpublish-all" name="fr-show" ev:event="DOMActivate"/>
												</xforms:trigger>
											</li>
										</ul>
										<!-- search -->
										<xforms:group ref="instance('control-instance')[number(numFound) &gt; 0]">
											<div>
												<h3>Search</h3>
												<xforms:input ref="query_input"/>
												<xforms:trigger>
													<xforms:label>Search</xforms:label>
													<xforms:action ev:event="DOMActivate">
														<xforms:setvalue ref="instance('control-instance')/query_sent"
															value="instance('control-instance')/query_input"/>
														<xforms:setvalue ref="instance('eXist-xquery')/exist:text"
															value="replace(instance('xqueries')/query[@id='query-objects'], 'QUERY', instance('control-instance')/query_sent)"/>
														<xforms:send submission="xquery-pagination"/>
													</xforms:action>
												</xforms:trigger>
												<xforms:group ref=".[string(query_sent)]">
													<xforms:trigger>
														<xforms:label>Clear</xforms:label>
														<xforms:action ev:event="DOMActivate">
															<!-- clear queries-->
															<xforms:setvalue ref="instance('control-instance')/query_input"/>
															<xforms:setvalue ref="instance('control-instance')/query_sent"/>
															<!-- re-establish pagination query on page 1 -->
															<xforms:setvalue ref="instance('control-instance')/page" value="1"/>
															<xforms:setvalue ref="instance('eXist-xquery')/exist:text"
																value="replace(instance('xqueries')/query[@id='get-objects'], 'START', '1')"/>
															<xforms:send submission="xquery-pagination"/>
														</xforms:action>
													</xforms:trigger>
												</xforms:group>
											</div>
										</xforms:group>
										<xforms:group ref="instance('pagination-result')">
											<xforms:group ref=".[count(//record) &gt; 0]">
												<h3>List of Objects</h3>
												<!-- pagination variables -->
												<xforms:var name="numFound" select="number(instance('control-instance')/numFound)"/>
												<xforms:var name="page" select="number(instance('control-instance')/page)"/>
												<xforms:var name="current" select="$page"/>
												<xforms:var name="rows" select="number(20)"/>
												<xforms:var name="start" select="(($page - 1) * 20) + 1"/>
												<xforms:var name="end" select="if ($numFound &lt; $page * 20) then $numFound else $page * 20"/>
												<xforms:var name="next" select="($page * 20) + 1"/>
												<xforms:var name="total" select="ceiling($numFound div 20)"/>
												<!-- pagination -->
												<xforms:group ref=".[string-length(instance('control-instance')/query_sent) = 0]">
													<!-- pagination -->
													<div class="paging_div row">
														<div class="col-md-6"> Displaying records <b>
																<xforms:output value="(($page - 1) * $rows) + 1"/>
															</b> to <b>
																<xforms:output value="if ($numFound &gt; $page * $rows) then $page * $rows else $numFound"/>
															</b> of <b>
																<xforms:output value="$numFound"/>
															</b> total results.</div>
														<div class="col-md-6 text-right">
															<!-- previous -->
															<xforms:group ref=".[$page &gt; 1]">
																<xforms:trigger>
																	<xforms:label><span class="glyphicon glyphicon-fast-backward"></span></xforms:label>
																	<xforms:action ev:event="DOMActivate">
																		<xforms:setvalue ref="instance('control-instance')/page" value="1"/>
																		<xforms:setvalue ref="instance('eXist-xquery')/exist:text"
																			value="replace(instance('xqueries')/query[@id='get-objects'], 'START', '1')"/>
																		<xforms:send submission="xquery-pagination"/>
																	</xforms:action>
																</xforms:trigger>
																<xforms:trigger>
																	<xforms:label><span class="glyphicon glyphicon-backward"></span></xforms:label>
																	<xforms:action ev:event="DOMActivate">
																		<xforms:setvalue ref="instance('control-instance')/page" value="$page - 1"/>
																		<xforms:setvalue ref="instance('eXist-xquery')/exist:text"
																			value="replace(instance('xqueries')/query[@id='get-objects'], 'START', string($start - 20))"/>
																		<xforms:send submission="xquery-pagination"/>
																	</xforms:action>
																</xforms:trigger>
															</xforms:group>
															<xforms:group ref=".[$page = 1]">
																<a class="btn btn-default disabled" title="First" href="#">
																	<span class="glyphicon glyphicon-fast-backward"></span>
																</a>
																<a class="btn btn-default disabled" title="Previous" href="#">
																	<span class="glyphicon glyphicon-backward"></span>
																</a>
															</xforms:group>
															<!-- current-->
															<button type="button" class="btn btn-default">
																<b>
																	<xforms:output value="$current"/>
																</b>
															</button>
															<!-- next -->
															<xforms:group ref=".[$total &gt; $current]">
																<xforms:trigger>
																	<xforms:label><span class="glyphicon glyphicon-forward"></span></xforms:label>
																	<xforms:action ev:event="DOMActivate">
																		<xforms:setvalue ref="instance('control-instance')/page" value="$page + 1"/>
																		<xforms:setvalue ref="instance('eXist-xquery')/exist:text"
																			value="replace(instance('xqueries')/query[@id='get-objects'], 'START', string($next))"/>
																		<xforms:send submission="xquery-pagination"/>
																	</xforms:action>
																</xforms:trigger>
																<xforms:trigger>
																	<xforms:label>
																		<span class="glyphicon glyphicon-fast-forward"></span>
																	</xforms:label>
																	<xforms:action ev:event="DOMActivate">
																		<xforms:setvalue ref="instance('control-instance')/page" value="$total"/>
																		<xforms:setvalue ref="instance('eXist-xquery')/exist:text"
																			value="replace(instance('xqueries')/query[@id='get-objects'], 'START', string((($total - 1) * 20) + 1))"/>
																		<xforms:send submission="xquery-pagination"/>
																	</xforms:action>
																</xforms:trigger>
															</xforms:group>
															<xforms:group ref=".[not($total &gt; $current)]">
																<a class="btn btn-default disabled" title="Next" href="#">
																	<span class="glyphicon glyphicon-forward"></span>
																</a>
																<a class="btn btn-default disabled" href="#">
																	<span class="glyphicon glyphicon-fast-forward"></span>
																</a>
															</xforms:group>
														</div>
													</div>
												</xforms:group>
												<table class="table">
													<thead>
														<tr>
															<th style="width:5%">Type</th>
															<th>Title</th>
															<th style="width:10%">View</th>
															<th style="width:5%">Publish</th>
															<th style="width:5%">Delete</th>
														</tr>
													</thead>
													<tbody>
														<xforms:repeat nodeset="instance('pagination-result')//record">
															<xforms:var name="id" select="id"/>
															<xforms:var name="type" select="type"/>
															
															<tr>
																<td class="text-center">
																	<xforms:output ref="type"/>
																</td>
																<td>
																	<h4>
																		<xforms:group ref=".[type='NUDS']">
																			<xforms:trigger appearance="minimal">
																				<xforms:label value="concat(title, ' (', $id, ')')"/>
																				<xforms:action ev:event="DOMActivate">
																				<xforms:load show="replace" resource="edit/coin/?id={$id}"/>
																				</xforms:action>
																			</xforms:trigger>
																		</xforms:group>
																		<xforms:group ref=".[type!='NUDS']">
																			<xforms:output ref="title"/>
																			<xforms:output ref="concat('(', $id, ')')"/>
																		</xforms:group>
																	</h4>
																	<div>
																		<xforms:output ref="maintenanceStatus">
																			<xforms:label>Status</xforms:label>
																		</xforms:output>
																	</div>
																	<xforms:group ref="recordType">
																		<div>
																			<xforms:output ref=".">
																				<xforms:label>Record Type</xforms:label>
																			</xforms:output>
																		</div>
																	</xforms:group>
																	<xforms:group ref="obverse">
																		<div>
																			<xforms:output ref=".">
																				<xforms:label>Obverse</xforms:label>
																			</xforms:output>
																		</div>
																	</xforms:group>
																	<xforms:group ref="reverse">
																		<div>
																			<xforms:output ref=".">
																				<xforms:label>Reverse</xforms:label>
																			</xforms:output>
																		</div>
																	</xforms:group>
																</td>
																<td class="text-center">
																	<a href="{instance('config')/url}id/{$id}.xml" target="_blank">xml</a> | <a
																		href="{instance('config')/url}id/{$id}" target="_blank">html</a>
																</td>
																<td class="text-center">
																	<!-- only enable publication if the maintenanceStatus allows it -->
																	<xforms:group
																		ref=".[maintenanceStatus='new' or maintenanceStatus='revised' or maintenanceStatus='derived' or maintenanceStatus='approved']">
																		<xforms:group ref="published[. = true()]">
																			<xforms:trigger appearance="minimal">
																				<xforms:label><span
																				class="glyphicon glyphicon-{if (.=true()) then 'ok' else 'unchecked'}"
																				></span></xforms:label>
																				<xforms:action ev:event="DOMActivate">
																				<xforms:var name="val" select="." as="xs:boolean"/>
																				<xforms:setvalue ref="instance('control-instance')/id" value="$id"/>
																					
																				<!-- update publicationStatus, only for NUDS -->
																				<xforms:action if="$type != 'EpiDoc TEI'">
																					<xforms:setvalue ref="instance('control-instance')/publicationStatus"
																						>inProcess</xforms:setvalue>
																					<xforms:send submission="load-object"/>
																				</xforms:action>																				
																				
																				<!-- delete from Solr -->
																				<xforms:setvalue ref="instance('deleteId')/query"
																				value="concat('recordId:&#x022;', instance('control-instance')/id, '&#x022;')"/>
																				<xforms:send submission="delete-solr-doc"/>
																				<xforms:setvalue ref="." value="false()"/>
																				</xforms:action>
																			</xforms:trigger>
																		</xforms:group>
																		<xforms:group ref="published[. = false()]">
																			<xforms:trigger appearance="minimal">
																				<xforms:label><span
																				class="glyphicon glyphicon-{if (.=true()) then 'ok' else 'unchecked'}"
																				></span></xforms:label>
																				<xforms:action ev:event="DOMActivate">
																				<xforms:var name="val" select="." as="xs:boolean"/>
																				<!-- publish the record if the box is checked -->
																				<xforms:setvalue ref="instance('control-instance')/id" value="$id"/>
																					
																					<!-- update publicationStatus, only for NUDS -->
																					<xforms:action if="$type != 'EpiDoc TEI'">
																						<xforms:setvalue ref="instance('control-instance')/publicationStatus"
																							>approved</xforms:setvalue>
																						<xforms:send submission="load-object"/>
																					</xforms:action>
																				
																				<!-- publish to solr -->
																				<xforms:send submission="nuds-to-solr"/>
																				<xforms:send submission="submit-commit"/>
																				<xforms:setvalue ref="." value="true()"/>
																				</xforms:action>
																			</xforms:trigger>
																		</xforms:group>
																	</xforms:group>
																</td>
																<td class="text-center">
																	<xforms:trigger appearance="minimal">
																		<xforms:label>
																			<span class="glyphicon glyphicon-remove"></span>
																		</xforms:label>
																		<xforms:action ev:event="DOMActivate">
																			<xforms:setvalue ref="instance('control-instance')/id" value="$id"/>
																			<xforms:dispatch target="delete" name="fr-show"/>
																		</xforms:action>
																	</xforms:trigger>
																</td>
															</tr>
														</xforms:repeat>
													</tbody>
												</table>
											</xforms:group>
											<xforms:group ref=".[count(//record)=0]">
												<h3>No objects in collection.</h3>
											</xforms:group>
										</xforms:group>
									</xforms:case>
									<xforms:case id="union_type_catalog">
										<h2>Union Type Corpus</h2>
										<p>This collection is configured as a union type corpus of the following type series:</p> <p>The XML collection is not
											designed to store its own NUDS documents, but rather combines Solr and SPARQL queries from the designated series in
											the Numishare config, pointing search/browse responses to the external corpus.</p>
									</xforms:case>
								</xforms:switch>
							</div>
						</xforms:case>
					</xforms:switch>
					<!--<fr:xforms-inspector/>-->
				</div>
			</div>
		</div>
		<!-- *********************** DIALOGS ********************* -->
		<!-- ********* NUMISHARE-ADMIN ********* -->
		<fr:alert-dialog id="delete-collection-dialog">
			<fr:label>Delete Collection</fr:label>
			<fr:message>Are you sure you want to delete this collection? This is irreversible. It is recommended that you make a backup first.</fr:message>
			<fr:negative-choice>
				<fr:label>No</fr:label>
			</fr:negative-choice>
			<fr:positive-choice>
				<fr:label>Yes</fr:label>
				<xforms:action ev:event="DOMActivate">
					<!-- set and submit the XQuery -->
					<xforms:setvalue ref="instance('eXist-xquery')/exist:text"
						value="replace(instance('xqueries')/query[@id='delete-collection'], '%COLLECTION%', instance('control-instance')/collection-name)"/>
					<xforms:send submission="xquery-db"/>
					<!-- delete the collection from the collections-list XML -->
					<xforms:delete nodeset="instance('collections-list')/collection[@name=instance('control-instance')/collection-name]"/>
					<xforms:send submission="save-collections"/>
					<!-- update status and get collection metadata -->
					<xforms:action ev:event="xforms-submit-done">
						<xforms:setvalue ref="instance('control-instance')/status">Collection successfully removed from eXist-db.</xforms:setvalue>
						<xforms:setvalue ref="instance('eXist-xquery')/exist:text"
							value="replace(instance('xqueries')/query[@id='collection-metadata'], '%SEQUENCE%', string-join(instance('collections-list')/collection/@name, ','))"/>
						<xforms:send submission="xquery-db"/>
						<!-- blank collection name -->
						<xforms:setvalue ref="instance('control-instance')/collection-name"/>
					</xforms:action>
				</xforms:action>
			</fr:positive-choice>
		</fr:alert-dialog>
		
		<xxf:dialog id="facet-class-dialog">
			<xforms:label>Assign facet classicifications for search page</xforms:label>
			
			<h3>Facets</h3>
			<p>Entity facets are people, dynasties, or organizations. Places correspond to places of production or issue. <br/>
				Typology includes other typological classifications (denomination, etc.)<br/>
				Provenance includes previous collections, including discovery in hoards or single finds.</p>
			<p>Search categories can be text-searchable (recommended for entities) to facet lists.</p>
			
			<table>
				<thead>
					<tr>
						<th>Field</th>
						<th>Broad Category</th>
						<th>Search Type</th>
					</tr>
				</thead>
				<tbody>
					<xforms:repeat nodeset="instance('config')/facets/facet">
						<tr>
							<td><xforms:output ref="."/></td>
							<td>
								<xforms:select1 ref="@role">
									<xforms:alert>Required</xforms:alert>
									<xforms:item>
										<xforms:label>Select...</xforms:label>
										<xforms:value/>
									</xforms:item>
									<xforms:item>
										<xforms:label>Department</xforms:label>
										<xforms:value>department</xforms:value>
									</xforms:item>
									<xforms:item>
										<xforms:label>Entity</xforms:label>
										<xforms:value>entity</xforms:value>
									</xforms:item>
									<xforms:item>
										<xforms:label>Physical Attribute</xforms:label>
										<xforms:value>physical</xforms:value>
									</xforms:item>
									<xforms:item>
										<xforms:label>Place</xforms:label>
										<xforms:value>place</xforms:value>
									</xforms:item>
									<xforms:item>
										<xforms:label>Provenance</xforms:label>
										<xforms:value>provenance</xforms:value>
									</xforms:item>
									<xforms:item>
										<xforms:label>Reference</xforms:label>
										<xforms:value>reference</xforms:value>
									</xforms:item>
									<xforms:item>
										<xforms:label>Subject</xforms:label>
										<xforms:value>subject</xforms:value>
									</xforms:item>
									<xforms:item>
										<xforms:label>Symbol</xforms:label>
										<xforms:value>symbol</xforms:value>
									</xforms:item>
									<xforms:item>
										<xforms:label>Typology</xforms:label>
										<xforms:value>typology</xforms:value>
									</xforms:item>
								</xforms:select1>
							</td>
							<td>
								<xforms:select1 ref="@type">
									<xforms:alert>Required</xforms:alert>
									<xforms:item>
										<xforms:label>Select...</xforms:label>
										<xforms:value/>
									</xforms:item>
									<xforms:item>
										<xforms:label>Facet List</xforms:label>
										<xforms:value>list</xforms:value>
									</xforms:item>
									<xforms:item>
										<xforms:label>Text Search</xforms:label>
										<xforms:value>text</xforms:value>
									</xforms:item>
								</xforms:select1>
							</td>
						</tr>
					</xforms:repeat>
				</tbody>
			</table>
			
			
			<xforms:trigger bind="save-trigger">
				<xforms:label>Save</xforms:label>
				<xforms:action ev:event="DOMActivate">
					<xforms:send submission="save-config"/>
					<xxf:hide dialog="facet-class-dialog"/>
				</xforms:action>
			</xforms:trigger>
			
		</xxf:dialog>
		
		<!-- ********* NUMISHARE-EDITOR ********* -->
		<fr:alert-dialog id="delete">
			<fr:label>Delete</fr:label>
			<fr:message>Are you sure you want to delete this object?</fr:message>
			<fr:negative-choice>
				<fr:label>No</fr:label>
			</fr:negative-choice>
			<fr:positive-choice>
				<fr:label>Yes</fr:label>
				<xforms:action ev:event="DOMActivate">
					<xforms:send submission="delete-object"/>
					<xforms:setvalue ref="instance('deleteId')/query" value="concat('recordId:&#x022;', instance('control-instance')/id, '&#x022;')"/>
					<xforms:send submission="delete-solr-doc"/>
					<!-- get new numCount -->
					<xforms:setvalue ref="instance('eXist-xquery')/exist:text" value="instance('xqueries')/query[@id='collection-count']"/>
					<xforms:send submission="xquery-collection"/>
					<!-- reload table -->
					<xforms:var name="page" select="number(instance('control-instance')/page)"/>
					<xforms:var name="start" select="(($page - 1) * 20) + 1"/>
					<xforms:var name="end" select="$page * 20"/>
					<xforms:setvalue ref="instance('eXist-xquery')/exist:text"
						value="replace(instance('xqueries')/query[@id='get-objects'], 'START', string($start))"/>
					<xforms:send submission="xquery-pagination"/>
				</xforms:action>
			</fr:positive-choice>
		</fr:alert-dialog>
		<!-- mass publication dialogs -->
		<fr:alert-dialog id="publish-all-dialog">
			<fr:label>Publish All</fr:label>
			<fr:message>Do you want to publish all objects? This may take several minutes.</fr:message>
			<fr:negative-choice>
				<fr:label>No</fr:label>
			</fr:negative-choice>
			<fr:positive-choice>
				<fr:label>Yes</fr:label>
				<xforms:action ev:event="DOMActivate">
					<xforms:var name="count" select="if (instance('config')/collection_type='hoard') then '25' else '100'"/>
					<xforms:setvalue ref="instance('eXist-xquery')/exist:text" value="replace(instance('xqueries')/query[@id='publish-all'], 'COUNT', $count)"/>
					<xforms:send submission="xquery-collection"/>
					<xforms:action ev:event="xforms-submit-done">
						<xforms:var name="tokens" select="tokenize(replace(instance('xquery-result')/report, ' ', ''), ',')"/>
						<xforms:action xxf:iterate="$tokens">
							<xforms:setvalue ref="instance('control-instance')/identifiers" value="context()"/>
							<!-- get Solr document -->
							<xforms:send submission="generate-add-document"/>
							<xforms:send submission="submit-commit"/>
						</xforms:action>
						<!-- reload table -->
						<xforms:setvalue ref="instance('eXist-xquery')/exist:text" value="replace(instance('xqueries')/query[@id='get-objects'], 'START', '1')"/>
						<xforms:send submission="xquery-pagination"/>
					</xforms:action>
				</xforms:action>
			</fr:positive-choice>
		</fr:alert-dialog>
		<fr:alert-dialog id="unpublish-all">
			<fr:label>Unpublish All</fr:label>
			<fr:message>Do you want to unpublish all objects?</fr:message>
			<fr:negative-choice>
				<fr:label>No</fr:label>
			</fr:negative-choice>
			<fr:positive-choice>
				<fr:label>Yes</fr:label>
				<xforms:action ev:event="DOMActivate">
					<xforms:setvalue ref="instance('deleteAll')/query" value="concat('collection-name:', instance('control-instance')/collection-name)"/>
					<xforms:send submission="delete-all"/>
					<!-- optimize index -->
					<!--<xforms:send submission="optimize"></xforms:send>-->
					<!-- reload table -->
					<xforms:setvalue ref="instance('eXist-xquery')/exist:text" value="replace(instance('xqueries')/query[@id='get-objects'], 'START', '1')"/>
					<xforms:send submission="xquery-pagination"/>
				</xforms:action>
			</fr:positive-choice>
		</fr:alert-dialog>		
	</body>
</html>
